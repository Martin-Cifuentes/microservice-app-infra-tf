name: 'Terraform - Plan en PR'

on:
  pull_request:
    branches:
      - 'main'
      - 'infra/dev'

env:
  tf_resource_group_name: "tu-rg-del-estado"
  tf_storage_account_name: "tustorageaccount"
  tf_state_container: "tfstate"
  tf_state_key: "terraform.tfstate"
  tf_working_dir: '.'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_working_dir }}

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false  # facilita captura de salidas/manual

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.tf_resource_group_name }}" \
            -backend-config="storage_account_name=${{ env.tf_storage_account_name }}" \
            -backend-config="container_name=${{ env.tf_state_container }}" \
            -backend-config="key=${{ env.tf_state_key }}" \
            -input=false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan (to file)
        id: plan
        run: |
          set -e
          terraform plan -no-color -input=false -out=tfplan.bin
          terraform show -no-color tfplan.bin > plan.txt
          # guarda peque√±os res√∫menes como outputs
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          grep -E 'Plan:|No changes. Infrastructure is up-to-date.' plan.txt || true
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comentar Plan en la PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planBody = fs.existsSync('plan.txt')
              ? fs.readFileSync('plan.txt', 'utf8').slice(0, 65500) // evitar l√≠mite
              : 'No se gener√≥ plan (posible fallo en init/validate).';

            const output = `#### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Format üé® \`${{ steps.fmt.outcome }}\`
            #### Terraform Validation ‚úÖ/‚ùå \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Mostrar Plan Completo</summary>

            \`\`\`
            ${planBody}
            \`\`\`

            </details>

            _Ejecutado por: @${{ github.actor }} ‚Ä¢ Evento: \`${{ github.event_name }}\`_`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });