name: 'Terraform - Plan en PR'

on:
  pull_request:
    branches:
      - 'main'
      - 'infra/dev'

env:
  # --- ¬°AJUSTA ESTOS VALORES SEG√öN TU BACKEND! ---
  tf_resource_group_name: "tu-rg-del-estado"
  tf_storage_account_name: "tustorageaccount"
  tf_state_container: "tfstate"
  tf_state_key: "terraform.tfstate"
  # ------------------------------------------------
  tf_working_dir: '.' # Ajusta si es necesario

jobs:
  terraform-plan:
    if: github.event_name == 'pull_request'
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_working_dir }}
    environment: production # Opcional: √∫til para gestionar secretos por entorno

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.tf_resource_group_name }}" \
            -backend-config="storage_account_name=${{ env.tf_storage_account_name }}" \
            -backend-config="container_name=${{ env.tf_state_container }}" \
            -backend-config="key=${{ env.tf_state_key }}"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: false

      - name: Actualizar Pull Request con el Plan
        if: always() # Se ejecuta incluso si falla el plan, para reportar el error
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.USER_TOKEN }} # Usa el PAT que creaste
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Format üé® \`${{ steps.fmt.outcome }}\`
            #### Terraform Validation ‚ùé \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Mostrar Plan Completo</summary>

            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Ejecutado por: @${{ github.actor }}, Acci√≥n: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })