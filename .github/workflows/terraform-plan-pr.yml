name: 'Terraform - Plan en PR'

on:
  # Permite comentar en PRs desde forks
  pull_request_target:
    branches: ['main', 'infra/dev']
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  tf_working_dir: '.'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.tf_working_dir }}
    env:
      # Satisface tus variables requeridas en variables.tf
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_admin_ssh_key:   ${{ secrets.ADMIN_SSH_PUBLIC_KEY }}

    steps:
      # Con pull_request_target, checkoutea el HEAD del PR de forma segura
      - name: Checkout (PR head)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (local backend)
        id: init
        run: terraform init -backend=false -input=false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan (no refresh, to file)
        id: plan
        run: |
          set -e
          terraform plan -no-color -input=false -refresh=false -out=tfplan.bin
          terraform show -no-color tfplan.bin > plan.txt

      - name: Comentar Plan en la PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.existsSync('plan.txt') ? fs.readFileSync('plan.txt','utf8').slice(0,65000) : 'No se generó plan.';
            const output = `#### Init ⚙️ \`${{ steps.init.outcome }}\`
            #### Format 🎨 \`${{ steps.fmt.outcome }}\`
            #### Validate ✅/❌ \`${{ steps.validate.outcome }}\`
            #### Plan 📖 \`${{ steps.plan.outcome }}\`

            <details><summary>Mostrar Plan</summary>

            \`\`\`
            ${body}
            \`\`\`

            </details>

            _@${{ github.actor }} • \`${{ github.event_name }}\`_`;
            await github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: output });